; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61219.0 

	TITLE	C:\Users\Ben\Documents\Visual Studio 2012\Projects\CO2411Assignment\dll_Sort\dll_Sort.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_dllQuickSort
PUBLIC	_dllSort
PUBLIC	?swap@@YAXQAVSalesData@@HH@Z			; swap
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_dllSort$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_dllSort$0
__unwindtable$_dllSort DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_dllSort DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_dllSort$2
__ehfuncinfo$_dllSort DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_dllSort
	DD	01H
	DD	FLAT:__tryblocktable$_dllSort
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_dllQuickSort$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_dllQuickSort$0
__unwindtable$_dllQuickSort DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_dllQuickSort DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_dllQuickSort$2
__ehfuncinfo$_dllQuickSort DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_dllQuickSort
	DD	01H
	DD	FLAT:__tryblocktable$_dllQuickSort
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\users\ben\documents\visual studio 2012\projects\co2411assignment\dll_sort\dll_sort.cpp
;	COMDAT ?swap@@YAXQAVSalesData@@HH@Z
_TEXT	SEGMENT
_second$ = 8						; size = 4
?swap@@YAXQAVSalesData@@HH@Z PROC			; swap, COMDAT
; _salesData$ = ecx
; _first$ = edx

; 11   : {

	push	ebp
	mov	ebp, esp

; 12   : 	SalesData temp;
; 13   : 	temp = salesData[first];

	lea	eax, DWORD PTR [edx+edx*2]
	push	esi
	mov	esi, DWORD PTR [ecx+eax*4+8]
	movq	xmm1, QWORD PTR [ecx+eax*4]
	lea	edx, DWORD PTR [ecx+eax*4]

; 14   : 	salesData[first] = salesData[second];

	mov	eax, DWORD PTR _second$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	movq	xmm0, QWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [ecx+eax*4]
	movq	QWORD PTR [edx], xmm0
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax

; 15   : 	salesData[second] = temp;

	movq	QWORD PTR [ecx], xmm1
	mov	DWORD PTR [ecx+8], esi
	pop	esi

; 16   : }

	pop	ebp
	ret	0
?swap@@YAXQAVSalesData@@HH@Z ENDP			; swap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\ben\documents\visual studio 2012\projects\co2411assignment\dll_sort\dll_sort.cpp
;	COMDAT _dllSort
_TEXT	SEGMENT
_i$1$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_salesData$ = 8						; size = 4
_size$ = 12						; size = 4
_comparison$ = 16					; size = 4
_dllSort PROC						; COMDAT

; 21   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$_dllSort
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 22   : 	// If size is negative then InvalidParameters error should be returned
; 23   : 	// Could check salesData items for validity, returning an error for any negative values or 
; 24   : 	// items where each value is 0 but is can be safely assumed that the input will be correct
; 25   : 	// and any validation should be performed in a different function
; 26   : 	if (size < 0)

	mov	ecx, DWORD PTR _size$[ebp]
	test	ecx, ecx
	jns	SHORT $LN9@dllSort

; 27   : 	{
; 28   : 		return InvalidParameters;

	mov	eax, -5					; fffffffbH

; 50   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@dllSort:

; 29   : 	}
; 30   : 
; 31   : 	try
; 32   : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 33   : 		for(int i = 0; i < size; i++)

	xor	eax, eax
$LN23@dllSort:
	mov	DWORD PTR _i$1$[ebp], eax
	cmp	eax, ecx
	jge	$LN5@dllSort

; 34   : 		{
; 35   : 			for (int j = i + 1; j < size; j++)

	lea	esi, DWORD PTR [eax+1]
$LL4@dllSort:
	cmp	esi, ecx
	jge	$LN6@dllSort

; 36   : 			{
; 37   : 				if (comparison(salesData[j], salesData[i]))

	mov	ecx, DWORD PTR _salesData$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	sub	esp, 12					; 0000000cH
	movq	xmm0, QWORD PTR [ecx+eax*4]
	lea	edi, DWORD PTR [ecx+eax*4]
	lea	eax, DWORD PTR [esi+esi*2]
	lea	ebx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edi+8]
	mov	ecx, esp
	sub	esp, 12					; 0000000cH
	movq	QWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [ebx]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [ebx+8]
	mov	ecx, esp
	movq	QWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+8], eax
	call	DWORD PTR _comparison$[ebp]
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN3@dllSort

; 14   : 	salesData[first] = salesData[second];

	movq	xmm0, QWORD PTR [ebx]
	movq	xmm1, QWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+8]
	movq	QWORD PTR [edi], xmm0
	mov	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR [edi+8], eax

; 15   : 	salesData[second] = temp;

	movq	QWORD PTR [ebx], xmm1
	mov	DWORD PTR [ebx+8], ecx
$LN3@dllSort:

; 34   : 		{
; 35   : 			for (int j = i + 1; j < size; j++)

	mov	eax, DWORD PTR _i$1$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	inc	esi
	jmp	SHORT $LL4@dllSort
__catch$_dllSort$0:

; 38   : 				{
; 39   : 					swap(salesData, i, j);
; 40   : 				}
; 41   : 			}
; 42   : 		}
; 43   : 	}
; 44   : 	catch (...)
; 45   : 	{
; 46   : 		return UnknownError;

	mov	eax, $LN15@dllSort
	ret	0
$LN15@dllSort:
	mov	eax, -4					; fffffffcH

; 50   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@dllSort:

; 33   : 		for(int i = 0; i < size; i++)

	inc	eax
	jmp	$LN23@dllSort
$LN5@dllSort:

; 47   : 	}
; 48   : 
; 49   : 	return Success;

	mov	eax, 1

; 50   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_dllSort:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$_dllSort
	jmp	___CxxFrameHandler3
text$x	ENDS
_dllSort ENDP
; Function compile flags: /Ogtp
; File c:\users\ben\documents\visual studio 2012\projects\co2411assignment\dll_sort\dll_sort.cpp
;	COMDAT _dllQuickSort
_TEXT	SEGMENT
_pivotValue$1$ = -28					; size = 8
_pivotValue$2$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_salesData$ = 8						; size = 4
_start$ = 12						; size = 4
_end$ = 16						; size = 4
_comparison$ = 20					; size = 4
_dllQuickSort PROC					; COMDAT

; 56   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$_dllQuickSort
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 57   : 	// Return InvalidParameters if start or end are incorrect
; 58   : 	if (start < 0 || end < 0 || end < start)

	mov	ebx, DWORD PTR _start$[ebp]
	test	ebx, ebx
	js	$LN11@dllQuickSo
	mov	eax, DWORD PTR _end$[ebp]
	test	eax, eax
	js	$LN11@dllQuickSo
	cmp	eax, ebx
	jl	$LN11@dllQuickSo

; 61   : 	}
; 62   : 
; 63   : 	try
; 64   : 	{
; 65   : 		// Take the value in the middle of the array as the pivotal value
; 66   : 		SalesData pivotValue = salesData[start + ((end - start) / 2)];

	mov	edi, DWORD PTR _salesData$[ebp]
	sub	eax, ebx
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, ebx
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	lea	eax, DWORD PTR [eax+eax*2]

; 67   : 		int startPointer = start;

	mov	esi, ebx
	movq	xmm0, QWORD PTR [edi+eax*4]
	mov	ecx, DWORD PTR [edi+eax*4+8]

; 68   : 		int endPointer = end - 1;

	mov	ebx, DWORD PTR _end$[ebp]
	movq	QWORD PTR _pivotValue$1$[ebp], xmm0
	mov	DWORD PTR _pivotValue$2$[ebp], ecx
$LN32@dllQuickSo:
	mov	edx, DWORD PTR _comparison$[ebp]
	dec	ebx

; 69   : 
; 70   : 		// Partition the array
; 71   : 		// Moves through the array swapping elements as required so that every value on either side of the pivot
; 72   : 		// is either greater than or less than it as defined by the comparison function, though they may be in any order
; 73   : 		while(startPointer <= endPointer)

	cmp	esi, ebx
	jg	$LN8@dllQuickSo
$LL7@dllQuickSo:

; 74   : 		{
; 75   : 			// Increment the startPointer until we find an element on the left that needs to be swapped
; 76   : 			while(comparison(salesData[startPointer], pivotValue))

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	sub	esp, 12					; 0000000cH
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], ecx
	lea	eax, DWORD PTR [esi+esi*2]
	mov	ecx, esp
	movq	xmm0, QWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [edi+eax*4+8]
	movq	QWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+8], eax
	call	edx
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LL5@dllQuickSo

; 77   : 			{
; 78   : 				startPointer++;
; 79   : 			}

	movq	xmm0, QWORD PTR _pivotValue$1$[ebp]
	mov	edx, DWORD PTR _comparison$[ebp]
	mov	ecx, DWORD PTR _pivotValue$2$[ebp]
	inc	esi
	jmp	SHORT $LL7@dllQuickSo
	npad	4
$LL5@dllQuickSo:

; 80   : 
; 81   : 			// Decrement the endPointer until we find an element on the right that needs to be swapped
; 82   : 			while(comparison(pivotValue, salesData[endPointer]))

	lea	eax, DWORD PTR [ebx+ebx*2]
	sub	esp, 12					; 0000000cH
	movq	xmm0, QWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [edi+eax*4+8]
	mov	ecx, esp
	sub	esp, 12					; 0000000cH
	movq	QWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR _pivotValue$1$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _pivotValue$2$[ebp]
	mov	eax, esp
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], ecx
	call	DWORD PTR _comparison$[ebp]
	add	esp, 24					; 00000018H
	test	al, al
	je	SHORT $LN4@dllQuickSo

; 83   : 			{
; 84   : 				endPointer--;

	dec	ebx

; 85   : 			}

	jmp	SHORT $LL5@dllQuickSo
$LN4@dllQuickSo:

; 86   : 		
; 87   : 			// Swap the elements at the pointers if the start pointer is still less than the end pointer
; 88   : 			if (startPointer <= endPointer)

	movq	xmm0, QWORD PTR _pivotValue$1$[ebp]
	mov	edx, DWORD PTR _comparison$[ebp]
	mov	ecx, DWORD PTR _pivotValue$2$[ebp]
	cmp	esi, ebx
	jg	SHORT $LN8@dllQuickSo

; 14   : 	salesData[first] = salesData[second];

	mov	ecx, DWORD PTR _salesData$[ebp]
	lea	eax, DWORD PTR [esi+esi*2]

; 89   : 			{
; 90   : 				swap(salesData, startPointer, endPointer);
; 91   : 				startPointer++;

	inc	esi

; 13   : 	temp = salesData[first];

	movq	xmm1, QWORD PTR [edi+eax*4]
	lea	edx, DWORD PTR [edi+eax*4]

; 14   : 	salesData[first] = salesData[second];

	lea	eax, DWORD PTR [ebx+ebx*2]
	mov	edi, DWORD PTR [edx+8]
	movq	xmm0, QWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [ecx+eax*4]
	movq	QWORD PTR [edx], xmm0
	mov	eax, DWORD PTR [ecx+8]

; 92   : 				endPointer--;
; 93   : 			}
; 94   : 		}

	movq	xmm0, QWORD PTR _pivotValue$1$[ebp]

; 14   : 	salesData[first] = salesData[second];

	mov	DWORD PTR [edx+8], eax

; 15   : 	salesData[second] = temp;

	movq	QWORD PTR [ecx], xmm1
	mov	DWORD PTR [ecx+8], edi

; 92   : 				endPointer--;
; 93   : 			}
; 94   : 		}

	mov	edi, DWORD PTR _salesData$[ebp]
	mov	ecx, DWORD PTR _pivotValue$2$[ebp]
	jmp	$LN32@dllQuickSo
__catch$_dllQuickSort$0:

; 105  : 		}
; 106  : 	}
; 107  : 	catch (...)
; 108  : 	{
; 109  : 		return UnknownError;

	mov	eax, $LN18@dllQuickSo
	ret	0
$LN18@dllQuickSo:
	mov	eax, -4					; fffffffcH

; 114  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@dllQuickSo:

; 95   : 
; 96   : 		// Recursive cases
; 97   : 		if (start < endPointer)

	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, ebx
	jge	SHORT $LN2@dllQuickSo

; 98   : 		{
; 99   : 			dllQuickSort(salesData, start, endPointer, comparison);

	push	edx
	push	ebx
	push	eax
	push	edi
	call	_dllQuickSort
	mov	edx, DWORD PTR _comparison$[ebp]
	add	esp, 16					; 00000010H
$LN2@dllQuickSo:

; 100  : 		}
; 101  : 	
; 102  : 		if (startPointer < end)

	mov	eax, DWORD PTR _end$[ebp]
	cmp	esi, eax
	jge	SHORT $LN1@dllQuickSo

; 103  : 		{
; 104  : 			dllQuickSort(salesData, startPointer, end, comparison);

	push	edx
	push	eax
	push	esi
	push	edi
	call	_dllQuickSort
	add	esp, 16					; 00000010H
$LN1@dllQuickSo:

; 110  : 	}
; 111  : 
; 112  : 	// Finally, return success
; 113  : 	return Success;

	mov	eax, 1

; 114  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@dllQuickSo:

; 59   : 	{
; 60   : 		return InvalidParameters;

	mov	eax, -5					; fffffffbH

; 114  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_dllQuickSort:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$_dllQuickSort
	jmp	___CxxFrameHandler3
text$x	ENDS
_dllQuickSort ENDP
END
